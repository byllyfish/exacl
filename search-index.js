var searchIndex = new Map(JSON.parse('[\
["exacl",{"doc":"exacl","t":"TTFGFTTTTTTTPTFPTTPTTTPTFTTTTTTTPPTTTTTNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNHHNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNONNNNNNHNNNNNNNNNNNNNNHNNNNHNNNNNNNNNNNNNNNNNNNNN","n":["ACCESS_ACL","APPEND","AclEntry","AclEntryKind","AclOption","CHOWN","DEFAULT","DEFAULT_ACL","DELETE","DELETE_CHILD","DIRECTORY_INHERIT","EXECUTE","Everyone","FILE_INHERIT","Flag","Group","INHERITED","LIMIT_INHERIT","Mask","NFS4_SPECIFIC","NFS4_SPECIFIC","ONLY_INHERIT","Other","POSIX_SPECIFIC","Perm","READ","READATTR","READEXTATTR","READSECURITY","READ_DATA","SYMLINK_ACL","SYNC","Unknown","User","WRITE","WRITEATTR","WRITEEXTATTR","WRITESECURITY","WRITE_DATA","all","all","all","allow","allow_group","allow_mask","allow_other","allow_user","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","contains","contains","contains","default","default","default","deny_group","deny_user","difference","difference","difference","empty","empty","empty","eq","eq","eq","eq","eq","extend","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_iter","from_mode","from_name","from_name","from_name","from_reader","from_str","from_str","from_str","from_str","from_str","getfacl","hash","hash","hash","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","iter","iter_names","iter_names","iter_names","kind","name","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","perms","remove","remove","remove","set","set","set","setfacl","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_writer","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","union","union"],"q":[[0,"exacl"],[265,"core::option"],[266,"core::convert"],[267,"std::os::raw"],[268,"core::cmp"],[269,"core::iter::traits::collect"],[270,"core::fmt"],[271,"core::fmt"],[272,"std::io::error"],[273,"std::io"],[274,"core::result"],[275,"std::path"],[276,"core::convert"],[277,"bitflags::iter"],[278,"bitflags::iter"],[279,"std::io"]],"d":["Get/set the access ACL only (Linux and FreeBSD only).","APPEND_DATA permission for a file. Same as …","ACL entry with allow/deny semantics.","Kind of ACL entry (User, Group, Mask, Other, or Unknown).","Controls how ACL’s are accessed.","CHANGE_OWNER permission for a file or directory.","Specifies a default ACL entry on Linux.","Get/set the default ACL only (Linux and FreeBSD only).","DELETE permission for a file.","DELETE_CHILD permission for a directory.","Inherit to directories.","EXECUTE permission for a file. Same as SEARCH permission …","Entry represents a NFS “everyone” entry.","Inherit to files.","Represents ACL entry inheritance flags.","Entry represents a group.","ACL entry was inherited.","Clear the DIRECTORY_INHERIT flag in the ACL entry that is …","Entry represents a Posix.1e “mask” entry.","NFSv4 Specific Flags on FreeBSD.","All NFSv4 specific permissions.","Don’t consider this entry when processing the ACL. Just …","Entry represents a Posix.1e “other” entry.","Posix specific permissions.","Represents file access permissions.","READ_DATA permission for a file. Same as LIST_DIRECTORY …","READ_ATTRIBUTES permission for file or directory.","READ_EXTATTRIBUTES permission for a file or directory.","READ_SECURITY permission for a file or directory.","NFSv4 READ_DATA permission.","Get/set the ACL of the symlink itself (macOS only).","SYNCHRONIZE permission (unsupported).","Entry represents a possibly corrupt ACL entry, caused by …","Entry represents a user.","WRITE_DATA permission for a file. Same as ADD_FILE …","WRITE_ATTRIBUTES permission for a file or directory.","WRITE_EXTATTRIBUTES permission for a file or directory.","WRITE_SECURITY permission for a file or directory.","NFSv4 WRITE_DATA permission.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","True if entry is allowed; false means deny. Linux only …","Construct an ALLOW access control entry for a group.","Construct an ALLOW access control entry for mask.","Construct an ALLOW access control entry for other.","Construct an ALLOW access control entry for a user.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","Construct a DENY access control entry for a group.","Construct a DENY access control entry for a user.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Flags indicating whether an entry is inherited, etc.","","","","","","","","Format an <code>AclEntry</code> 5-tuple: …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","","Convert from a bits value exactly.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Construct a minimal ACL from the traditional <code>mode</code> …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Read ACL entries from text.","Read ACL entries from text.","","","","","Get access control list (ACL) for a file or directory.","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","Kind of entry (User, Group, Other, Mask, Everyone, or …","Name of the principal being given access. You can use a …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","Permission bits for the entry.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Set access control list (ACL) for specified files and …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","Write ACL entries to text.","","","","","Write ACL entries to text.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values."],"i":[1,3,0,0,0,3,2,1,3,3,2,3,11,2,0,11,2,2,11,2,3,2,11,3,0,3,3,3,3,3,1,3,11,11,3,3,3,3,3,1,2,3,5,5,5,5,5,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,2,3,3,1,2,3,1,2,3,1,11,5,2,3,1,11,5,2,3,1,11,5,2,3,1,11,5,2,3,1,11,5,2,3,1,2,3,1,2,3,1,2,3,5,5,1,2,3,1,2,3,1,11,5,2,3,1,2,3,5,1,1,1,1,1,11,11,5,5,2,2,2,2,2,2,3,3,3,3,3,3,1,11,5,2,3,1,2,3,1,1,2,2,3,3,1,2,3,1,2,3,0,1,2,3,0,0,11,5,2,3,0,1,2,3,1,2,3,1,2,3,1,2,3,1,11,5,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,5,5,1,2,3,1,11,5,2,3,5,1,2,3,1,2,3,0,1,2,3,1,2,3,1,2,3,1,11,5,2,3,0,11,5,2,3,0,1,2,3,1,11,5,2,3,1,11,5,2,3,1,11,5,2,3,1,2,3],"f":"```````````````````````````````````````{{}b}{{}d}{{}f}`{{hfc}j{{n{{l{d}}}}}}{{fc}j{{n{{l{d}}}}}}01{{bb}b}{{dd}d}{{ff}f}{{bb}A`}{{dd}A`}{{ff}A`}543210{bAb}0{dAb}0{fAd}0876543{ce{}{}}000000000{bb}{AfAf}{jj}{dd}{ff}{{ce}A`{}{}}0000{{bb}Ah}{{AfAf}Ah}{{jj}Ah}{{dd}Ah}{{ff}Ah}:76{{bb}Aj}{{dd}Aj}{{ff}Aj}{{}b}{{}d}{{}f}{{hfc}j{{n{{l{d}}}}}}0{{bb}b}{{dd}d}{{ff}f}6549{{AfAf}Aj}{{jj}Aj}:9{{bc}A`{{An{}{{Al{b}}}}}}{{dc}A`{{An{}{{Al{d}}}}}}{{fc}A`{{An{}{{Al{f}}}}}}`{{bB`}Bb}0000{{AfB`}Bb}0{{jB`}Bb}0{{dB`}Bb}00000{{fB`}Bb}00000{cc{}}0000{Ab{{l{b}}}}{Ab{{l{d}}}}{Ad{{l{f}}}}{Abb}0{Abd}0{Adf}0210{cb{{An{}{{Al{b}}}}}}{cd{{An{}{{Al{d}}}}}}{cf{{An{}{{Al{f}}}}}}{Ab{{Bd{j}}}}{h{{l{b}}}}{h{{l{d}}}}{h{{l{f}}}}{c{{Bf{{Bd{j}}}}}Bh}{h{{Bf{{Bd{j}}}}}}{h{{Bj{Afc}}}{}}{h{{Bj{jc}}}{}}{h{{Bj{dc}}}{}}{h{{Bj{fc}}}{}}{{ce}{{Bf{{Bd{j}}}}}{{Bn{Bl}}}{{n{{l{b}}}}}}{{bc}A`C`}{{dc}A`C`}{{fc}A`C`}{{bb}A`}{{dd}A`}{{ff}A`}{{bb}b}{{dd}d}{{ff}f}{{bb}Aj}{{dd}Aj}{{ff}Aj}{ce{}{}}0000{bc{}}{dc{}}{fc{}}{bAj}{dAj}{fAj}210{b{{Cb{b}}}}{d{{Cb{d}}}}{f{{Cb{f}}}}{b{{Cd{b}}}}{d{{Cd{d}}}}{f{{Cd{f}}}}``{bb}{dd}{ff}{{bb}{{l{Ah}}}}{{AfAf}{{l{Ah}}}}{{jj}{{l{Ah}}}}{{dd}{{l{Ah}}}}{{ff}{{l{Ah}}}}`{{bb}A`}{{dd}A`}{{ff}A`}{{bbAj}A`}{{ddAj}A`}{{ffAj}A`}{{{Cf{c}}{Cf{j}}e}{{Bf{A`}}}{{Bn{Bl}}}{{n{{l{b}}}}}}{{bb}b}{{dd}d}{{ff}f}987210{ce{}{}}0000{{{Cf{j}}}{{Bf{Ch}}}}{cCh{}}000{{c{Cf{j}}}{{Bf{A`}}}Cj}=<;{c{{Bj{e}}}{}{}}000000000{cCl{}}0000876","c":[],"p":[[5,"AclOption",0],[5,"Flag",0],[5,"Perm",0],[1,"str"],[5,"AclEntry",0],[6,"Option",265],[10,"Into",266],[1,"unit"],[1,"u32"],[8,"c_uint",267],[6,"AclEntryKind",0],[6,"Ordering",268],[1,"bool"],[17,"Item"],[10,"IntoIterator",269],[5,"Formatter",270],[8,"Result",270],[5,"Vec",271],[8,"Result",272],[10,"Read",273],[6,"Result",274],[5,"Path",275],[10,"AsRef",266],[10,"Hasher",276],[5,"Iter",277],[5,"IterNames",277],[1,"slice"],[5,"String",278],[10,"Write",273],[5,"TypeId",279]],"b":[[59,"impl-Flags-for-AclOption"],[60,"impl-AclOption"],[61,"impl-Flag"],[62,"impl-Flags-for-Flag"],[63,"impl-Perm"],[64,"impl-Flags-for-Perm"],[122,"impl-LowerHex-for-AclOption"],[123,"impl-UpperHex-for-AclOption"],[124,"impl-Binary-for-AclOption"],[125,"impl-Octal-for-AclOption"],[126,"impl-Debug-for-AclOption"],[127,"impl-Debug-for-AclEntryKind"],[128,"impl-Display-for-AclEntryKind"],[129,"impl-Display-for-AclEntry"],[130,"impl-Debug-for-AclEntry"],[131,"impl-Display-for-Flag"],[132,"impl-Debug-for-Flag"],[133,"impl-UpperHex-for-Flag"],[134,"impl-LowerHex-for-Flag"],[135,"impl-Octal-for-Flag"],[136,"impl-Binary-for-Flag"],[137,"impl-Debug-for-Perm"],[138,"impl-Octal-for-Perm"],[139,"impl-UpperHex-for-Perm"],[140,"impl-LowerHex-for-Perm"],[141,"impl-Display-for-Perm"],[142,"impl-Binary-for-Perm"],[151,"impl-AclOption"],[152,"impl-Flags-for-AclOption"],[153,"impl-Flags-for-Flag"],[154,"impl-Flag"],[155,"impl-Flags-for-Perm"],[156,"impl-Perm"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
